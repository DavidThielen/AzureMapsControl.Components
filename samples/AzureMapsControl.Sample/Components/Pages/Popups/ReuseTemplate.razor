@page "/Popups/ReuseTemplate"
@rendermode InteractiveServer

@using AzureMapsControl.Components.Map
<AzureMap Id="map"
          CameraOptions="new CameraOptions { Center= new AzureMapsControl.Components.Atlas.Position(-122.33, 47.63), Zoom = 11}"
          EventActivationFlags="MapEventActivationFlags
                                .None()
                                .Enable(MapEventType.Ready)"
          OnReady="OnMapReady" />

@code  {

    public class PropertySubValues
    {
        public string SubValue { get; set; }
    }

    public async Task OnMapReady(MapEventArgs eventArgs)
    {
        var datasource = new AzureMapsControl.Components.Data.DataSource();
        await eventArgs.Map.AddSourceAsync(datasource);

        await datasource.AddAsync(
            new AzureMapsControl.Components.Atlas.Feature<AzureMapsControl.Components.Atlas.Point>(
                "feature1",
                new AzureMapsControl.Components.Atlas.Point(new AzureMapsControl.Components.Atlas.Position(-122.33, 47.6))
            ),
            new AzureMapsControl.Components.Atlas.Feature<AzureMapsControl.Components.Atlas.Point>(
                "feature2",
                new AzureMapsControl.Components.Atlas.Point(new AzureMapsControl.Components.Atlas.Position(-122.335, 47.645))
            ),
            new AzureMapsControl.Components.Atlas.Feature<AzureMapsControl.Components.Atlas.Point>(
                "feature3",
                new AzureMapsControl.Components.Atlas.Point(new AzureMapsControl.Components.Atlas.Position(-122.325, 47.635))
            )
        );

        var template = new AzureMapsControl.Components.Popups.PopupTemplate
        {
            Content = new AzureMapsControl.Components.Atlas.Either<string, IEnumerable<AzureMapsControl.Components.Atlas.PropertyInfo>, IEnumerable<AzureMapsControl.Components.Atlas.Either<string, IEnumerable<AzureMapsControl.Components.Atlas.PropertyInfo>>>>
                ("This template uses a string template with placeholders.<br/><br/> - Value 1 = {value1}<br/> - Value 2 = {value2/subValue}<br/> - Array value [2] = {arrayValue/2}"),
            NumberFormat = new AzureMapsControl.Components.Atlas.FormatOptions.NumberFormatOptions
            {
                MaximumFractionDigits = 2
            }
        };

        var layer = new AzureMapsControl.Components.Layers.SymbolLayer {
            Options = new AzureMapsControl.Components.Layers.SymbolLayerOptions {
                Source = datasource.Id,
                IconOptions = new AzureMapsControl.Components.Layers.IconOptions {
                    AllowOverlap = true
                }
            },
            EventActivationFlags = AzureMapsControl.Components.Layers.LayerEventActivationFlags.None().Enable(AzureMapsControl.Components.Layers.LayerEventType.Click)
        };

        await eventArgs.Map.AddLayerAsync(layer);

        var popup = new AzureMapsControl.Components.Popups.Popup();
        await eventArgs.Map.AddPopupAsync(popup);

        layer.OnClick += async clickEventArgs => {
            if(clickEventArgs.Shapes is not null && clickEventArgs.Shapes.Any()) {
                var shape = clickEventArgs.Shapes.First();
                Dictionary<string, object> properties = null;
                switch (shape.Id)
                {
                    case "feature1":
                        properties = new Dictionary<string, object> {
                        { "title", "First feature" },
                        { "value1", 1.2345678},
                        { "value2", new PropertySubValues { SubValue = "Pizza" } },
                        { "arrayValue", new [] { 3,4,5,6 } }
                    };
                        break;
                    case "feature2":
                        properties = new Dictionary<string, object> {
                    { "title", "Second feature"},
                    { "value1", 3.14159},
                    { "value2", new PropertySubValues { SubValue = "Donut" } },
                    { "arrayValue", new [] { 13, 34, 42, 46 } }
                    };
                        break;
                    case "feature3":
                        properties = new Dictionary<string, object> {
                    { "title", "Third feature"},
                    { "value1", 100.1000001},
                    { "value2", new PropertySubValues { SubValue = "Taco" } },
                    { "arrayValue", new [] { 0, 0, 0 } }
                    };
                        break;
                }
                await popup.ApplyTemplateAsync(template, properties, options => {
                    options.Position = (shape.Geometry as AzureMapsControl.Components.Atlas.Point).Coordinates;
                    options.PixelOffset = new AzureMapsControl.Components.Atlas.Pixel(0, -18);
                });
                await popup.OpenAsync();
            }
        };

    }

}