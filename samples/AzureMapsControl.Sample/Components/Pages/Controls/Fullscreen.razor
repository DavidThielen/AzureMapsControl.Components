@page "/Controls/FullScreen"
@rendermode InteractiveServer
@inject AzureMapsControl.Components.FullScreen.IFullScreenService FullScreenService

@using AzureMapsControl.Components.Map
<AzureMap Id="map"
          EventActivationFlags="AzureMapsControl.Components.Map.MapEventActivationFlags.None().Enable(MapEventType.Ready)"
          OnReady="OnMapReady"
          StyleOptions="new AzureMapsControl.Components.Map.StyleOptions { Style = AzureMapsControl.Components.Map.MapStyle.GrayscaleLight }"/>

@code {
    public async Task OnMapReady(MapEventArgs eventArgs)
    {
        if (await FullScreenService.IsSupportedAsync())
        {
            var fullScreenControl = new AzureMapsControl.Components.Controls.FullScreenControl(new AzureMapsControl.Components.Controls.FullScreenControlOptions
            {
                Style = new AzureMapsControl.Components.Atlas.Either<AzureMapsControl.Components.Controls.ControlStyle, string>(AzureMapsControl.Components.Controls.ControlStyle.Auto)
            },
          AzureMapsControl.Components.Controls.ControlPosition.TopRight,
          AzureMapsControl.Components.FullScreen.FullScreenEventActivationFlags.All());

            fullScreenControl.OnFullScreenChanged += async isFullScreen => {
                if(isFullScreen) 
                {
                    await eventArgs.Map.SetStyleOptionsAsync(options => options.Style = MapStyle.GrayscaleDark);
                } 
                else
                {
                    await eventArgs.Map.SetStyleOptionsAsync(options => options.Style = MapStyle.GrayscaleLight);
                }
      };

            await eventArgs.Map.AddControlsAsync(fullScreenControl);
        }
    }
}